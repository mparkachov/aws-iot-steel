name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          ${{ runner.os }}-stable-cargo-
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --workspace --all-targets -- -D warnings
    
    - name: Build workspace
      run: cargo build --workspace --verbose
    
    - name: Run tests
      run: cargo test --workspace --verbose
    
    - name: Build examples
      run: cargo build --workspace --examples --verbose

  minimum-rust-version:
    name: Minimum Rust Version (1.82)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust 1.82
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.82.0
    
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ubuntu-1.82-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-1.82-cargo-
          ubuntu-stable-cargo-
          ubuntu-cargo-
    
    - name: Build with minimum Rust version
      run: cargo build --workspace
    
    - name: Test with minimum Rust version
      run: cargo test --workspace