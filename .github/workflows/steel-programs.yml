name: Steel Programs CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aws-iot-core/examples/steel/**'
      - 'steel-programs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'aws-iot-core/examples/steel/**'
      - 'steel-programs/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-steel-programs:
    name: Validate Steel Programs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.89.0
    
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ runner.os }}-cargo-steel-validate-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-steel-
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
    
    - name: Build Steel validator
      run: cargo build --bin steel_program_validator --package aws-iot-core
    
    - name: Validate Steel example programs
      run: |
        echo "Validating Steel example programs..."
        for steel_file in aws-iot-core/examples/steel/*.scm; do
          if [ -f "$steel_file" ]; then
            echo "Validating: $steel_file"
            cargo run --bin steel_program_validator --package aws-iot-core -- --file "$steel_file" --validate-only
          fi
        done
    
    - name: Validate Steel programs directory (if exists)
      run: |
        if [ -d "steel-programs" ]; then
          echo "Validating Steel programs directory..."
          for steel_file in steel-programs/**/*.scm; do
            if [ -f "$steel_file" ]; then
              echo "Validating: $steel_file"
              cargo run --bin steel_program_validator --package aws-iot-core -- --file "$steel_file" --validate-only
            fi
          done
        else
          echo "No steel-programs directory found, skipping"
        fi
    
    - name: Test Steel programs execution
      run: |
        echo "Testing Steel programs execution..."
        cargo run --bin steel_test --package aws-iot-core -- --validate-examples

  package-steel-programs:
    name: Package Steel Programs
    runs-on: ubuntu-latest
    needs: validate-steel-programs
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.89.0
    
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ runner.os }}-cargo-steel-package-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-steel-validate-
          ${{ runner.os }}-cargo-steel-
          ${{ runner.os }}-cargo-
    
    - name: Build Steel program packager
      run: cargo build --bin steel_program_validator --package aws-iot-core
    
    - name: Package Steel example programs
      run: |
        mkdir -p packaged-steel-programs
        
        for steel_file in aws-iot-core/examples/steel/*.scm; do
          if [ -f "$steel_file" ]; then
            filename=$(basename "$steel_file" .scm)
            echo "Packaging: $filename"
            
            # Create program package with metadata
            cargo run --bin steel_program_validator --package aws-iot-core -- \
              --file "$steel_file" \
              --package \
              --output "packaged-steel-programs/${filename}.json" \
              --version "${GITHUB_SHA:0:8}" \
              --author "AWS IoT Steel Team"
          fi
        done
    
    - name: Package custom Steel programs (if exists)
      run: |
        if [ -d "steel-programs" ]; then
          for steel_file in steel-programs/**/*.scm; do
            if [ -f "$steel_file" ]; then
              filename=$(basename "$steel_file" .scm)
              echo "Packaging: $filename"
              
              cargo run --bin steel_program_validator --package aws-iot-core -- \
                --file "$steel_file" \
                --package \
                --output "packaged-steel-programs/${filename}.json" \
                --version "${GITHUB_SHA:0:8}" \
                --author "Custom Steel Programs"
            fi
          done
        fi
    
    - name: Create Steel programs archive
      run: |
        cd packaged-steel-programs
        tar -czf ../steel-programs-package.tar.gz *.json
        cd ..
        
        # Create metadata for the package
        PACKAGE_SIZE=$(stat -c%s steel-programs-package.tar.gz)
        PACKAGE_CHECKSUM=$(sha256sum steel-programs-package.tar.gz | cut -d' ' -f1)
        PROGRAM_COUNT=$(ls packaged-steel-programs/*.json | wc -l)
        
        cat > steel-programs-metadata.json << EOF
        {
          "version": "${GITHUB_SHA:0:8}",
          "program_count": $PROGRAM_COUNT,
          "package_size_bytes": $PACKAGE_SIZE,
          "checksum": "$PACKAGE_CHECKSUM",
          "build_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "git_commit": "$GITHUB_SHA",
          "git_branch": "${GITHUB_REF#refs/heads/}"
        }
        EOF
    
    - name: Upload Steel programs package
      uses: actions/upload-artifact@v4
      with:
        name: steel-programs-package
        path: |
          steel-programs-package.tar.gz
          steel-programs-metadata.json
        retention-days: 90

  upload-steel-programs-to-aws:
    name: Upload Steel Programs to AWS S3
    runs-on: ubuntu-latest
    needs: package-steel-programs
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v5
    
    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHubActions-SteelPrograms-${{ github.run_id }}
    
    - name: Download Steel programs package
      uses: actions/download-artifact@v5
      with:
        name: steel-programs-package
        path: ./steel-artifacts
    
    - name: Upload Steel programs to S3
      run: |
        STEEL_VERSION="${GITHUB_SHA:0:8}"
        TIMESTAMP=$(date -u +%Y%m%d-%H%M%S)
        
        # Upload to build artifacts bucket
        aws s3 cp steel-artifacts/steel-programs-package.tar.gz \
          s3://${{ secrets.S3_BUILD_ARTIFACTS_BUCKET }}/steel-programs/${STEEL_VERSION}/steel-programs-package.tar.gz
        
        aws s3 cp steel-artifacts/steel-programs-metadata.json \
          s3://${{ secrets.S3_BUILD_ARTIFACTS_BUCKET }}/steel-programs/${STEEL_VERSION}/metadata.json
        
        # Create trigger file for CodePipeline
        echo "{\"version\":\"$STEEL_VERSION\",\"timestamp\":\"$TIMESTAMP\",\"commit\":\"$GITHUB_SHA\",\"type\":\"steel-programs\"}" | \
          aws s3 cp - s3://${{ secrets.S3_BUILD_ARTIFACTS_BUCKET }}/triggers/steel-programs-${STEEL_VERSION}.json
    
    - name: Notify Steel programs upload status
      run: |
        echo "âœ… Steel programs uploaded successfully"
        echo "Version: ${GITHUB_SHA:0:8}"
        echo "Triggering AWS CodePipeline for Steel programs deployment..."